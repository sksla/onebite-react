/*
  ** 원시타입 vs 객체 타입 **

  - 왜 이렇게 나누었을까?
  >> 값이 저장되거나 복사되는 과정이 서로 다르기 때문

  * 원시타입 (Number, String, Boolean...)
  - 값 자체로써 변수에 저장되고 복사됨
  - 불변값(immutable) ==> 메모리값 수정 X

  * 객체타입 (Object, Array, Function ...)
  - 참조값을 통해 변수에 저장되고 복사됨
  - 가변값 (mutable) ==> 메모리값 수정 O

  * 객체타입 주의사항
  1. 의도치 않게 값이 수정될 수 있다. 
      --> 깊은 복사 이용
      
  2. 객체간의 비교는 기본적으로 참조값을 기준으로 이루어짐(== 얕은 비교)
      --> 객체의 프로퍼티값을 비교하려면 JSON.stringfy 등의 내장함수 이용 (== 깊은 비교)
 
  3. 배열과 함수도 사실 객체이다. ==> 추가적인 프로퍼티나 메소드를 가질 수 있다.
*/

// < 원시타입 >
// 불변값 ==> 실제 메모리공간에 저장된 원본 데이터의 값은 변경되지 않음
let p1 = 1;
let p2 = p1;
/*
    [name]        [Memory]
      p1  ------>     1
      p2  ------>     1
*/

p2 = 2;
/*
    [name]        [Memory]
      p1  ------>     1
                      1  ===> 실제 메모리의 값은 수정되지 않음
      p2  ------>     2
*/

// < 객체 타입 >
// 얕은 복사 (객체의 참조값을 복사)
// ==> 원본 객체가 수정될 수 있어 위험
let o1 = { name: "이정환" };
let o2 = o1;

/*
  [name]                         [Memory]
    o1  ------>   
                  0x0000C(참조값) -------> {name:"이정환"}
    o2  ------>     
*/

o2.name = "홍길동";
/*
  [name]                         [Memory]
    o1  ------>   
                  0x0000C(참조값) -------> {name:"홍길동"}
    o2  ------>     

  ==> 실제 메모리공간에 저장된 원본 데이터의 값이 변경될 수 있음
*/

// 깊은 복사 (새로운 객체를 생성하면서 내부의 프로퍼티만 따로 복사)
// ==> 원본 객체가 수정될 일이 없어 안전
let d1 = { name: "이정환" };
let d2 = { ...d1 };

/*
  [name]                         [Memory]
    d1  ------>   0x0000C(참조값) -------> {name:"이정환"}
    d2  ------>   0xooooD(참조값) -------> {name:"이정환"}    
*/

d2.name = "홍길동";
/*
  [name]                         [Memory]
    d1  ------>   0x0000C(참조값) -------> {name:"이정환"}
    d2  ------>   0xooooD(참조값) -------> {name:"홍길동"}    
*/

// 얕은 비교와 깊은 비교
let a1 = { name: "이정환" };
let a2 = a1; // 얕은 복사
let a3 = { ...a1 }; // 깊은 복사

/*
  [name]                         [Memory]
    a1  ------>   
                  0x0000C(참조값) -------> {name:"이정환"}
    a2  ------>     
    a3  ------>   0x9950D(참조값) -------> {name:"이정환"}

  ==> 실제 메모리공간에 저장된 원본 데이터의 값이 변경될 수 있음
*/

// 얕은 비교 (참조값을 기준으로 비교)
console.log(a1 === a2); // true
console.log(a1 === a3); // false

// 깊은 비교 (객체를 문자열로 변환하여 비교)
// => JSON.stringfy() : 자바스크립트 내장함수, 객체를 문자열로 변환하는 기능
console.log(JSON.stringify(a1) === JSON.stringify(a3)); // true
