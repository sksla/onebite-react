/*
  * 동기와 비동기

  * 쓰레드(Thread) : 작업을 직접 실행하고 처리해주는 역할을 함

  * 동기란? 
  - 여러개의 작업을 순서대로, 하나씩 처리하는 방식
  - JavaScript는 "동기"적으로 코드를 실행
  - 장점 : 실행 흐름을 파악하기 쉽고 용이하다
  - 단점 : 오래 걸리는 작업 중간에 포함되었을 때 Thread는 그 작업을 다 처리하기 전까지 다음 작업을 진행하지 못함
          ==> 전체 프로그램의 성능이 악화됨

  => Java, C# 같은 언어에서는 위와 같은 문제 해결을 위해 멀티쓰레드 기법 활용

  * 멀티쓰레드(Multi Thread) : 여러 개의 쓰레드를 활용
                              오래 걸리는 작업이 중간에 포함되어도 해당 작업이 전체 프로그램의 성능을 악화시키는데 큰 영향을 주지 못함
                              동기 방식의 단점을 어느 정도 보완 가능

  => JavaScript 엔진에는 쓰레드가 1개 밖에 없음(싱글 쓰레드)!!! (멀티스레드 방식으로 문제 해결 불가)
  => 따라서 JavaScript에서는 비동기라는 방식을 통해서 해결

  * 비동기란?
  - 동기적이지 X, 작업을 순서대로 처리하지 않음
  - 여러 개의 작업이 주어졌을 때 앞선 작업이 종료되지 않아도 다른 작업을 동시에 진행시키는 것이 가능
  - 해당 작업의 결과값을 이용해서 또다른 동작을 수행시켜줘야 될 때 
    JavaScript에서는 각각의 작업에 콜백함수를 붙여서 처리해주는 것도 가능

    * JavaScript의 비동기 처리방법
    - 비동기 작업들은 JavaScript 엔진에 있는 쓰레드가 실행하는 것이 X,
    - Web APIs에서 따로 실행됨
      * Web APIs : 웹 브라우저가 직접 관리하는 별도의 영역
    - 실행 흐름
      1) 비동기 함수를 만나면 비동기 작업을 Web APIs에게 실행 부탁
        (끝나면 실행할 콜백함수까지 같이 넘겨줌)
      2) 그 후 쓰레드는 다음 작업 실행
      3) Web APIs에 있는 비동기 작업이 완료되면 전달받았던 콜백함수를 JavaScript 엔진에게 돌려줌
      4) JavaScript 엔진은 돌려받은 콜백함수 실행

  
*/

// 동기
console.log(1);
console.log(3);

// 비동기
// * setTimeout(콜백함수, 숫자값(ms)) : 코드를 특정 시간이 지난 이후에 비동기적으로 실행시켜주는 JavaScript 내장함수

console.log(1);

setTimeout(() => {
  console.log(2);
}, 3000); // 3000ms(3초) 후에 실행

console.log(3);
